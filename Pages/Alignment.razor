@page "/alignment"

@inject HttpClient client
@*<EditForm></EditForm>
    <InputText id="name" @bind-Value="@AlignmentModel.Name" />*@
    <h>Please select sequence files: <InputFile id="file" OnChange="HandleSelection" /></h>
            
<table width="100%">
    @if (string.IsNullOrWhiteSpace(Model.AlignmentError) && Model.AlignedSequences.Any())
    {
        @foreach (var seq in Model.AlignedSequences)
        {
            <tr>

                <td>
                    <div >@seq.Name</div>
                </td>

                @foreach (var c in @seq.Sequence)
                {
                    <td>
                        @if (c == '-')
                        {
                            <div class="alignment-no-match">&nbsp;</div>

                        }
                        else
                        {
                            <div class="alignment-match">&nbsp;</div>

                        }
                    </td>
                }
            </tr>
        }
    }
    else
    {
        @if (!string.IsNullOrWhiteSpace(Model.AlignmentError))
        {
            <tr>
                <td>
                    @Model.AlignmentError
                </td>
            </tr>
        }
    }
</table>

@code {
private AlignmentModel Model = new AlignmentModel();
private string status;
private IFileListEntry file;

private async Task HandleSelection(IFileListEntry[] files)
{
    file = files.FirstOrDefault();
    if (file != null)
    {
        Model.FileName = file.Name;
        Model.RawSequences =
                        (await FileUtilities.ReadFileContent(file.Data))
                        .Split(Environment.NewLine)
                        .Where(x => !string.IsNullOrWhiteSpace(x))
                        .ToHashSet();

        await FileUtilities.WriteFileContents(Model.ClustalOSequences, Model.FileName);
    }
    this.StateHasChanged();
}
}
