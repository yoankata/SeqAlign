@page "/regions"

@inject Microsoft.JSInterop.IJSRuntime JS

@if (status != Status.Done)
{
    <Preloader />
}
else
{
<div class="form-group">
    <label for="method">Please select stacking method: </label>
    <select id="method" class="form-control" @bind="@Method">
        @foreach (var method in Enum.GetValues(typeof(StackingMethod)))
        {
            <option value=@method>@method</option>
        }
    </select>
    <label for="file">Please select input file: </label>
    <br />
    <InputFile id="files" OnChange="HandleSelection"/> 
</div>

    <br />
    <br />
    @if (Model.Regions.Any())
    {
        <table width="100%">
            @foreach (var row in Model.Rows)
            {
                <tr>
                    @for (var i = Model.MinRegionStart;
                               i < Model.MaxRegionEnd;
                               i += (Model.MaxRegionEnd - Model.MinRegionStart) / 150)
                    {
                    <td>
                        @if (i.PositionIsInRow(row))
                        {
                            <div class="alignment-match">
                                <div class="tooltip">
                                    <span class="tooltiptext">Postion: @i</span>
                                    &nbsp;
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alignment-no-match">
                                <div class="tooltip">

                                    <span class="tooltiptext">Position: @i</span>
                                    &nbsp;
                                </div>
                            </div>
                        }
                    </td>
                    }
                </tr>
            }
        </table>
        <br />
        <button class="btn btn-primary" @onclick="@DownloadRegionsStack">Download</button>
        <br />

    }
}
@code {
    private RegionsModel Model = new RegionsModel();
    private StackingMethod Method = StackingMethod.RegularStacking;
    private Status status = Status.Done;
    private IFileListEntry[] files;
    private IFileListEntry file;

    private async Task HandleSelection(IFileListEntry[] files)
    {
        status = Status.Processing;
        file = files.FirstOrDefault();
        if (file != null)
        {
            var regions = (await FileUtilities.ReadFileContent(file.Data))
                            .Split(Environment.NewLine)
                            .Where(x => !string.IsNullOrWhiteSpace(x))
                            .Select((l, i) => new Region(i,
                                    Decimal.Parse(SplitByWhiteSpace(l).ElementAt(0)),
                                    Decimal.Parse(SplitByWhiteSpace(l).ElementAt(1))))
                            .ToHashSet();

            Model = new RegionsModel(regions, Method);

        }

        status = Status.Done;
        this.StateHasChanged();
    }

    private async Task DownloadRegionsStack()
    {
        var stream = await GetMemoryStream(Model);
        DownloadTxt(stream);
    }

    private async Task<MemoryStream> GetMemoryStream(RegionsModel model)
    {
        var rows = model.Rows;
        var regions = Method == StackingMethod.RegularStacking ?
            rows.SelectMany((r, i) => r.Select(reg => new
            {
                r1 = i.ToString(),
                r2 = reg.Start.ToString(),
                r3 = reg.End.ToString()
            }))
            : rows.SelectMany((r, i) => r.Select(reg => new
            {
                r1 = reg.Overlap.ToString(),
                r2 = reg.Start.ToString(),
                r3 = reg.End.ToString()
            }));

        var ms = new MemoryStream();

        using (var sw = new StreamWriter(ms))
            foreach (var line in regions)
            {
                var strLine = line.r1 + "\t" + line.r2 + "\t" + line.r3 + Environment.NewLine;
                await sw.WriteAsync(strLine);
            }

        return ms;
    }

    private void DownloadTxt(MemoryStream stream)
    {
        //Download the file in the browser.
        JS.SaveAs($"RegionStack_{Guid.NewGuid()}.txt", stream.ToArray());
    }

    private IEnumerable<string> SplitByWhiteSpace(string s)
    {
        var whiteSpacePattern = @"(\t|\s)+";
        var split = Regex.Split(s, whiteSpacePattern);
        return split.Where(x => !string.IsNullOrWhiteSpace(x));
    }
}
