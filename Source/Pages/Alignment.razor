@page "/alignment"

<h1>Multiple Sequence Alignment</h1>

@if (status != Status.Done)
{
    <Preloader />
}
else
{
    <h>Please select sequence files: <InputFile id="file" OnChange="HandleSelection" /></h>
    <br />

    <table width="100%">
        @if (string.IsNullOrWhiteSpace(Model.AlignmentError) && Model.AlignedSequences.Any())
        {
            @foreach (var seq in Model.AlignedSequences)
            {
                <tr>

                    <td>
                        <div>@seq.Name</div>
                    </td>

                    @foreach (var c in @seq.Sequence)
                    {
                        <td>
                            @if (c == '-')
                            {
                                <div class="alignment-no-match">&nbsp;</div>

                            }
                            else
                            {
                                <div class="alignment-match">&nbsp;</div>

                            }
                        </td>
                    }
                </tr>
            }
        }
        else
        {
            @if (!string.IsNullOrWhiteSpace(Model.AlignmentError))
            {
                <tr>
                    <td>
                        @Model.AlignmentError
                    </td>
                </tr>
            }
        }
    </table>
}

@code {
    private AlignmentModel Model = new AlignmentModel();
    private Status status = Status.Done;
    private IFileListEntry file;

    private async Task HandleSelection(IFileListEntry[] files)
    {
        status = Status.Processing;
        file = files.FirstOrDefault();
        if (file != null)
        {
            var rawData = await FileUtilities.ReadFileContent(file.Data);
            var pattern = @"(?=>)";
            var rawSequences = Regex.Split(rawData, pattern, RegexOptions.Multiline)
                            .Where(x => !string.IsNullOrWhiteSpace(x))
                            .ToList();

            Model = new AlignmentModel(rawSequences, file.Name);
        }
        status = Status.Done;
        this.StateHasChanged();
    }
}
